[{"/Users/sidx/workspace/react/tpt-app/src/index.js":"1","/Users/sidx/workspace/react/tpt-app/src/reportWebVitals.js":"2","/Users/sidx/workspace/react/tpt-app/src/app/layout/App.js":"3","/Users/sidx/workspace/react/tpt-app/src/app/layout/TitleBar/TitleBar.js":"4","/Users/sidx/workspace/react/tpt-app/src/app/layout/MenuBar/MenuBar.js":"5","/Users/sidx/workspace/react/tpt-app/src/app/layout/Scene/Scene.js":"6","/Users/sidx/workspace/react/tpt-app/src/app/layout/Footer/Footer.js":"7","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomeSearch/GenomeSearch.js":"8","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomeView/GenomeView.js":"9","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomeSearch/Data/GenomeDataService.js":"10","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomeView/GenomeViewMycobrowswer/GenomeViewMycobrowswer.js":"11","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomeView/GenomeViewNonPublicData/GenomeViewNonPublicData.js":"12","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomeView/GenomeViewBackgroundInformation/GenomeViewBackgroundInformation.js":"13","/Users/sidx/workspace/react/tpt-app/src/app/common/KeyValList/KeyValList.js":"14","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromote.js":"15","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormTarget/GenomePromoteFormTarget.js":"16","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormImpactOfChemInhibit/GenomePromoteFormImpactOfChemInhibit.js":"17","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormChemicalInhibition/GenomePromoteFormChemicalInhibition.js":"18","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormImpactOfGeneticInhibit/GenomePromoteFormImpactOfGeneticInhibit.js":"19","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormLiabilities/GenomePromoteFormLiabilities.js":"20","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormTractability/GenomePromoteFormTractability.js":"21","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormInteractions/GenomePromoteFormInteractions.js":"22"},{"size":655,"mtime":1611680988500,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1611180810196,"results":"25","hashOfConfig":"24"},{"size":747,"mtime":1611792004997,"results":"26","hashOfConfig":"24"},{"size":1097,"mtime":1611683020957,"results":"27","hashOfConfig":"24"},{"size":801,"mtime":1611682177638,"results":"28","hashOfConfig":"24"},{"size":880,"mtime":1611761485593,"results":"29","hashOfConfig":"24"},{"size":521,"mtime":1611762636310,"results":"30","hashOfConfig":"24"},{"size":4498,"mtime":1611762711268,"results":"31","hashOfConfig":"24"},{"size":3657,"mtime":1611763005628,"results":"32","hashOfConfig":"24"},{"size":156,"mtime":1611686752699,"results":"33","hashOfConfig":"24"},{"size":1992,"mtime":1611869377682,"results":"34","hashOfConfig":"24"},{"size":1830,"mtime":1611870863350,"results":"35","hashOfConfig":"24"},{"size":2010,"mtime":1611869425792,"results":"36","hashOfConfig":"24"},{"size":439,"mtime":1611762549198,"results":"37","hashOfConfig":"24"},{"size":4240,"mtime":1611866795675,"results":"38","hashOfConfig":"24"},{"size":4430,"mtime":1611867421195,"results":"39","hashOfConfig":"24"},{"size":11582,"mtime":1611867442114,"results":"40","hashOfConfig":"24"},{"size":7654,"mtime":1611867452518,"results":"41","hashOfConfig":"24"},{"size":10307,"mtime":1611867464097,"results":"42","hashOfConfig":"24"},{"size":5037,"mtime":1611867480398,"results":"43","hashOfConfig":"24"},{"size":10233,"mtime":1611867492918,"results":"44","hashOfConfig":"24"},{"size":8504,"mtime":1611868672001,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"14xcj3k",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"48"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"48"},"/Users/sidx/workspace/react/tpt-app/src/index.js",[],["98","99"],"/Users/sidx/workspace/react/tpt-app/src/reportWebVitals.js",[],"/Users/sidx/workspace/react/tpt-app/src/app/layout/App.js",[],"/Users/sidx/workspace/react/tpt-app/src/app/layout/TitleBar/TitleBar.js",[],"/Users/sidx/workspace/react/tpt-app/src/app/layout/MenuBar/MenuBar.js",[],"/Users/sidx/workspace/react/tpt-app/src/app/layout/Scene/Scene.js",[],"/Users/sidx/workspace/react/tpt-app/src/app/layout/Footer/Footer.js",[],"/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomeSearch/GenomeSearch.js",[],"/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomeView/GenomeView.js",["100"],"import React, { useState, useRef, useEffect } from \"react\";\nimport { TabView, TabPanel } from \"primereact/tabview\";\nimport { BreadCrumb } from \"primereact/breadcrumb\";\nimport { Menu } from \"primereact/menu\";\nimport { confirmDialog } from \"primereact/confirmdialog\";\nimport { Toast } from \"primereact/toast\";\nimport \"./TabViewDemo.css\";\nimport GenomeViewMycobrowswer from \"./GenomeViewMycobrowswer/GenomeViewMycobrowswer\";\nimport GenomeViewNonPublicData from \"./GenomeViewNonPublicData/GenomeViewNonPublicData\";\nimport GenomeViewBackgroundInformation from \"./GenomeViewBackgroundInformation/GenomeViewBackgroundInformation\";\n\nconst GenomeView = ({ match, history }) => {\n  const [activeIndex, setActiveIndex] = useState(0);\n  const toast = useRef(null);\n\n  // useEffect(() => {\n  //   console.log(match.params.id);\n  // }, [match.params.id]);\n\n  const breadCrumbItems = [\n    {\n      label: \"Genome\",\n      command: () => {\n        history.push(\"/genomes\");\n      },\n    },\n    { label: \"Rv1297\" },\n  ];\n\n  const items = [\n    {\n      label: \"Sections\",\n      items: [\n        {\n          label: \"Mycobrowser Information\",\n          icon: \"pi pi-refresh\",\n          command: () => {\n            setActiveIndex(0);\n          },\n        },\n        {\n          label: \"Non-Public Data\",\n          icon: \"pi pi-times\",\n          command: () => {\n            setActiveIndex(1);\n          },\n        },\n        {\n          label: \"Background Information\",\n          icon: \"pi pi-times\",\n          command: () => {\n            setActiveIndex(2);\n          },\n        },\n      ],\n    },\n    {\n      label: \"Actions\",\n      items: [\n        {\n          label: \"Promote to Target\",\n          icon: \"pi pi-external-link\",\n          command: (event) => {\n            confirmPromoteTarget(event);\n          },\n        },\n      ],\n    },\n  ];\n\n  const confirmPromoteTarget = (event) => {\n    confirmDialog({\n      header: \"Confirmation\",\n      message:\n        \"This would promote the current gene to a target. You will be asked to record more information on the next screen. Continue? \",\n      icon: \"pi pi-question-circle\",\n      accept,\n      reject,\n    });\n  };\n\n  const accept = () => {\n    history.push(`/genomes/${match.params.id}/promote`);\n  };\n\n  const reject = () => {\n    toast.current.show({\n      severity: \"info\",\n      summary: \"Rejected\",\n      detail: \"You have rejected\",\n      life: 3000,\n    });\n  };\n\n  return (\n    <React.Fragment>\n      <Toast ref={toast} />\n      <br />\n      <div className=\"p-d-flex\">\n        <div className=\"p-mr-2\">\n          <Menu model={items} />\n        </div>\n        <div className=\"p-mr-2\">\n          <div className=\"p-d-flex p-flex-column\">\n            <div className=\"p-mb-2\">\n              <BreadCrumb model={breadCrumbItems} />\n            </div>\n            <div className=\"p-mb-2\">\n              <h2 className=\"heading\">Rv1297</h2>\n            </div>\n            <div className=\"p-mb-2\">\n              <TabView\n                activeIndex={activeIndex}\n                onTabChange={(e) => setActiveIndex(e.index)}\n              >\n                <TabPanel header=\"Header I\" headerClassName=\"hide\">\n                  <GenomeViewMycobrowswer />\n                </TabPanel>\n                <TabPanel header=\"Header II\" headerClassName=\"hide\">\n                  <GenomeViewNonPublicData />\n                </TabPanel>\n                <TabPanel header=\"Header III\" headerClassName=\"hide\">\n                  <GenomeViewBackgroundInformation />\n                </TabPanel>\n              </TabView>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default GenomeView;\n","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomeSearch/Data/GenomeDataService.js",[],"/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomeView/GenomeViewMycobrowswer/GenomeViewMycobrowswer.js",[],"/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomeView/GenomeViewNonPublicData/GenomeViewNonPublicData.js",[],"/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomeView/GenomeViewBackgroundInformation/GenomeViewBackgroundInformation.js",[],"/Users/sidx/workspace/react/tpt-app/src/app/common/KeyValList/KeyValList.js",[],"/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromote.js",["101"],"import React, { useState, useRef, useEffect } from \"react\";\nimport { Steps } from \"primereact/steps\";\nimport { Toast } from \"primereact/toast\";\n\nimport cssClass from \"./GenomePromote.module.css\";\nimport GenomePromoteFormTarget from \"./GenomePromoteFormTarget/GenomePromoteFormTarget\";\nimport GenomePromoteFormImpactOfChemInhibit from \"./GenomePromoteFormImpactOfChemInhibit/GenomePromoteFormImpactOfChemInhibit\";\nimport GenomePromoteFormChemicalInhibition from \"./GenomePromoteFormChemicalInhibition/GenomePromoteFormChemicalInhibition\";\nimport GenomePromoteFormImpactOfGeneticInhibit from \"./GenomePromoteFormImpactOfGeneticInhibit/GenomePromoteFormImpactOfGeneticInhibit\";\nimport GenomePromoteFormLiabilities from \"./GenomePromoteFormLiabilities/GenomePromoteFormLiabilities\";\nimport GenomePromoteFormTractability from \"./GenomePromoteFormTractability/GenomePromoteFormTractability\";\nimport GenomePromoteFormInteractions from \"./GenomePromoteFormInteractions/GenomePromoteFormInteractions\";\n\nconst GenomePromote = ({ params, history }) => {\n  const toast = useRef(null);\n\n  const stepItems = [\n    { label: \"Target\" },\n    { label: \"Impact of chemical inhibition\" },\n    { label: \"Chemical inhibition\" },\n    { label: \"Impact of genetic inhibition\" },\n    { label: \"Liabilities\" },\n    { label: \"Tractability\" },\n    { label: \"Interactions\" },\n  ];\n\n  let formData = {\n    activeIndex: 0,\n    genomePromoteFormTarget: null,\n    genomePromoteFormImpactOfChemInhibit: null,\n    genomePromoteFormChemicalInhibition: null,\n    genomePromoteFormImpactOfGeneticInhibit: null,\n    genomePromoteFormLiabilities: null,\n    genomePromoteFormTractability: null,\n    genomePromoteFormInteractions: null,\n  };\n\n  const [formDataState, setFormDataState] = useState(formData);\n\n  const setFormData = (activeIndex, formName, data) => {\n    let newFormData = { ...formDataState };\n    newFormData.activeIndex = activeIndex;\n    newFormData[formName] = { ...data };\n    setFormDataState(newFormData);\n    console.log(formDataState);\n  };\n\n  let formToDisplay = () => {\n    switch (formDataState.activeIndex) {\n      case 0:\n        return (\n          <GenomePromoteFormTarget\n            onFormSet={(data) =>\n              setFormData(1, \"GenomePromoteFormTarget\", data)\n            }\n          />\n        );\n\n      case 1:\n        return (\n          <GenomePromoteFormImpactOfChemInhibit\n            onFormSet={(data) =>\n              setFormData(2, \"GenomePromoteFormImpactOfChemInhibit\", data)\n            }\n          />\n        );\n\n      case 2:\n        return (\n          <GenomePromoteFormChemicalInhibition\n            onFormSet={(data) =>\n              setFormData(3, \"GenomePromoteFormChemicalInhibition\", data)\n            }\n          />\n        );\n\n      case 3:\n        return (\n          <GenomePromoteFormImpactOfGeneticInhibit\n            onFormSet={(data) =>\n              setFormData(4, \"GenomePromoteFormImpactOfGeneticInhibit\", data)\n            }\n          />\n        );\n\n      case 4:\n        return (\n          <GenomePromoteFormLiabilities\n            onFormSet={(data) =>\n              setFormData(5, \"GenomePromoteFormLiabilities\", data)\n            }\n          />\n        );\n\n      case 5:\n        return (\n          <GenomePromoteFormTractability\n            onFormSet={(data) =>\n              setFormData(6, \"GenomePromoteFormTractability\", data)\n            }\n          />\n        );\n\n      case 6:\n        return (\n          <GenomePromoteFormInteractions\n            onFormSet={(data) =>\n              setFormData(7, \"GenomePromoteFormInteractions\", data)\n            }\n          />\n        );\n\n      default:\n        break;\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Toast ref={toast} />\n      <div className=\"p-d-flex p-flex-column\">\n        <div className=\"p-mb-2\">\n          <h2 className=\"heading\">Promoting Gene Rv1297 to Target</h2>\n        </div>\n        <div className=\"p-mb-2\">\n          <Steps model={stepItems} activeIndex={formDataState.activeIndex} />\n        </div>\n        <div className=\"p-mb-2\">\n          <div className={[cssClass.GenomePromoteForm].join(\" \")}>\n            {formToDisplay()}\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default GenomePromote;\n","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormTarget/GenomePromoteFormTarget.js",[],"/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormImpactOfChemInhibit/GenomePromoteFormImpactOfChemInhibit.js",[],"/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormChemicalInhibition/GenomePromoteFormChemicalInhibition.js",["102"],"import React, { useState } from \"react\";\nimport { SplitButton } from \"primereact/splitbutton\";\nimport { Dropdown } from \"primereact/dropdown\";\n\nconst GenomePromoteFormChemicalInhibition = (props) => {\n  const [formValue, setFormValue] = useState({\n    mutationInTargetCausesResistance: \"\",\n    overexpressionOfTargetIncreaseMIC: \"\",\n    underexpressionOfTargetIncreaseMIC: \"\",\n    impactOnPathway: \"\",\n    compoundBindsPurifedTarget: \"\",\n    compoundInhibitsPurifedTarget: \"\",\n    supportingInformation: \"\",\n    modifedOn: \"\",\n    modifedBy: \"\",\n  });\n\n  const setForm = (e) => {\n    var newFormValue = { ...formValue };\n    newFormValue[e.target.name] = e.target.value;\n    setFormValue(newFormValue);\n    console.log(e);\n  };\n\n  const nextButtonItems = [\n    {\n      label: \"Save form data in browser\",\n      icon: \"pi pi-cloud-download\",\n      command: () => {\n        console.log(\"Save form data local\");\n      },\n    },\n    {\n      label: \"Reset\",\n      icon: \"pi pi-refresh\",\n      command: () => {\n        console.log(\"Reset Section\");\n      },\n    },\n  ];\n\n  const selectItemsYN = [\n    { label: \"Yes\", value: \"yes\" },\n    { label: \"No\", value: \"no\" },\n    { label: \"Unknown\", value: \"un\" },\n  ];\n\n  const selectItemsAI = [\n    { label: \"Active\", value: \"active\" },\n    { label: \"Inactive\", value: \"inactive\" },\n    { label: \"Unknown\", value: \"un\" },\n  ];\n\n  return (\n    <React.Fragment>\n      <div className=\"card\">\n        <h5>a) in live Mtb</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"mutationInTargetCausesResistance\"\n              className=\"p-col-12 p-md-2\"\n            >\n              Mutation in target causes resistance?\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"mutationInTargetCausesResistance\"\n                options={selectItemsYN}\n                value={formValue.mutationInTargetCausesResistance}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"overexpressionOfTargetIncreaseMIC\"\n              className=\"p-col-12 p-md-2\"\n            >\n              Overexpression of target increase MIC?\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"overexpressionOfTargetIncreaseMIC\"\n                options={selectItemsYN}\n                value={formValue.overexpressionOfTargetIncreaseMIC}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"underexpressionOfTargetIncreaseMIC\"\n              className=\"p-col-12 p-md-2\"\n            >\n              Underexpression of target increase MIC?\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"underexpressionOfTargetIncreaseMIC\"\n                options={selectItemsYN}\n                value={formValue.underexpressionOfTargetIncreaseMIC}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"impactOnPathway\" className=\"p-col-12 p-md-2\">\n              Impact on pathway :\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"impactOnPathway\"\n                options={selectItemsYN}\n                value={formValue.impactOnPathway}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <br />\n        </div>\n      </div>\n\n      <div className=\"card\">\n        <h5>b) in vitro</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"compoundBindsPurifedTarget\"\n              className=\"p-col-12 p-md-2\"\n            >\n              Compound binds purifed target\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"compoundBindsPurifedTarget\"\n                options={selectItemsYN}\n                value={formValue.compoundBindsPurifedTarget}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"compoundInhibitsPurifedTarget\"\n              className=\"p-col-12 p-md-2\"\n            >\n              Compound inhibits purifed target\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"compoundInhibitsPurifedTarget\"\n                options={selectItemsYN}\n                value={formValue.compoundInhibitsPurifedTarget}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"supportingInformation\" className=\"p-col-12 p-md-2\">\n              Supporting information\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"supportingInformation\"\n                options={selectItemsYN}\n                value={formValue.supportingInformation}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"modifedOn\" className=\"p-col-12 p-md-2\">\n              Modifed on\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"modifedOn\"\n                options={selectItemsYN}\n                value={formValue.modifedOn}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"modifedBy\" className=\"p-col-12 p-md-2\">\n              Modifed by\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"modifedBy\"\n                options={selectItemsYN}\n                value={formValue.modifedBy}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid p-jc-end\">\n            <div className=\"p-col-12 p-md-2\">\n              <SplitButton\n                label=\"Next\"\n                icon=\"pi pi-arrow-right\"\n                model={nextButtonItems}\n                className=\"p-button-success p-button-sm\"\n                onClick={() => {\n                  props.onFormSet(formValue);\n                }}\n              ></SplitButton>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default GenomePromoteFormChemicalInhibition;\n","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormImpactOfGeneticInhibit/GenomePromoteFormImpactOfGeneticInhibit.js",["103"],"import React, { useState } from \"react\";\nimport { SplitButton } from \"primereact/splitbutton\";\nimport { Dropdown } from \"primereact/dropdown\";\n\nconst GenomePromoteFormImpactOfGeneticInhibit = (props) => {\n  const [formValue, setFormValue] = useState({\n    nhp: \"\",\n    c3HeBFeJAcuteInfection: \"\",\n    c3HeFeJChronicInfection: \"\",\n    c57BL6OrBALBcAcuteInfection: \"\",\n    c57BL6OrBALBcChronicInfection: \"\",\n    macrophage: \"\",\n    standardMedia: \"\",\n    gluconeogenicCarbonSource: \"\",\n    otherSection2: \"\",\n    multipleStress: \"\",\n    lowPH: \"\",\n    caseum: \"\",\n    caseumSurrogate: \"\",\n    otherNR: \"\",\n  });\n\n  const setForm = (e) => {\n    var newFormValue = { ...formValue };\n    newFormValue[e.target.name] = e.target.value;\n    setFormValue(newFormValue);\n    console.log(e);\n  };\n\n  const nextButtonItems = [\n    {\n      label: \"Save form data in browser\",\n      icon: \"pi pi-cloud-download\",\n      command: () => {\n        console.log(\"Save form data local\");\n      },\n    },\n    {\n      label: \"Reset\",\n      icon: \"pi pi-refresh\",\n      command: () => {\n        console.log(\"Reset Section\");\n      },\n    },\n  ];\n\n  const selectItemsYN = [\n    { label: \"Yes\", value: \"yes\" },\n    { label: \"No\", value: \"no\" },\n    { label: \"Unknown\", value: \"un\" },\n  ];\n\n  const selectItemsAI = [\n    { label: \"Active\", value: \"active\" },\n    { label: \"Inactive\", value: \"inactive\" },\n    { label: \"Unknown\", value: \"un\" },\n  ];\n\n  return (\n    <React.Fragment>\n      <div className=\"card\">\n        <h5>a) During infections</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"nhp\" className=\"p-col-12 p-md-2\">\n              NHP\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"nhp\"\n                options={selectItemsAI}\n                value={formValue.nhp}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"c3HeBFeJAcuteInfection\" className=\"p-col-12 p-md-2\">\n              C3HeB/FeJ-Acute infection :\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"c3HeBFeJAcuteInfection\"\n                options={selectItemsAI}\n                value={formValue.c3HeBFeJAcuteInfection}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"c3HeFeJChronicInfection\"\n              className=\"p-col-12 p-md-2\"\n            >\n              C3He/FeJ-Chronic infection\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"c3HeFeJChronicInfection\"\n                options={selectItemsAI}\n                value={formValue.c3HeFeJChronicInfection}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"c57BL6OrBALBcAcuteInfection\"\n              className=\"p-col-12 p-md-2\"\n            >\n              C57BL/6 or BALB/c-Acute infection\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"c57BL6OrBALBcAcuteInfection\"\n                options={selectItemsAI}\n                value={formValue.c57BL6OrBALBcAcuteInfection}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"c57BL6OrBALBcChronicInfection\"\n              className=\"p-col-12 p-md-2\"\n            >\n              C57BL/6 or BALB/c-Chronic infection\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"c57BL6OrBALBcChronicInfection\"\n                options={selectItemsAI}\n                value={formValue.c57BL6OrBALBcChronicInfection}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"macrophage\" className=\"p-col-12 p-md-2\">\n              Macrophage\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"macrophage\"\n                options={selectItemsAI}\n                value={formValue.macrophage}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <br />\n        </div>\n      </div>\n\n      <div className=\"card\">\n        <h5>b) on replication Mtb in vitro</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"standardMedia\" className=\"p-col-12 p-md-2\">\n              Standard media\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"standardMedia\"\n                options={selectItemsAI}\n                value={formValue.standardMedia}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"gluconeogenicCarbonSource\"\n              className=\"p-col-12 p-md-2\"\n            >\n              Gluconeogenic carbon source\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"gluconeogenicCarbonSource\"\n                options={selectItemsAI}\n                value={formValue.gluconeogenicCarbonSource}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"otherSection2\" className=\"p-col-12 p-md-2\">\n              Other\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"otherSection2\"\n                options={selectItemsAI}\n                value={formValue.otherSection2}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <br />\n        </div>\n      </div>\n\n      <div className=\"card\">\n        <h5>c) on nonreplicating Mtb in vitro</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"multipleStress\" className=\"p-col-12 p-md-2\">\n              Multiple stress\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"multipleStress\"\n                options={selectItemsAI}\n                value={formValue.multipleStress}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"lowPH\" className=\"p-col-12 p-md-2\">\n              Low pH\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"lowPH\"\n                options={selectItemsAI}\n                value={formValue.lowPH}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"caseum\" className=\"p-col-12 p-md-2\">\n              Caseum\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"caseum\"\n                options={selectItemsAI}\n                value={formValue.caseum}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"caseumSurrogate\" className=\"p-col-12 p-md-2\">\n              Caseum surrogate\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"caseumSurrogate\"\n                options={selectItemsAI}\n                value={formValue.caseumSurrogate}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"otherNR\" className=\"p-col-12 p-md-2\">\n              Other NR\n            </label>\n            <div className=\"p-col-12 p-md-10\">\n              <Dropdown\n                name=\"otherNR\"\n                options={selectItemsAI}\n                value={formValue.otherNR}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid p-jc-end\">\n            <div className=\"p-col-12 p-md-2\">\n              <SplitButton\n                label=\"Next\"\n                icon=\"pi pi-arrow-right\"\n                model={nextButtonItems}\n                className=\"p-button-success p-button-sm\"\n                onClick={() => {\n                  props.onFormSet(formValue);\n                }}\n              ></SplitButton>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default GenomePromoteFormImpactOfGeneticInhibit;\n","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormLiabilities/GenomePromoteFormLiabilities.js",["104"],"import React, { useState } from \"react\";\nimport { SplitButton } from \"primereact/splitbutton\";\nimport { Dropdown } from \"primereact/dropdown\";\n\nconst GenomePromoteFormLiabilities = (props) => {\n  const [formValue, setFormValue] = useState({\n    targetInhibitionActivation: \"\",\n    concentrationOfSupplement: \"\",\n    functionallyRedundantGenes: \"\",\n    withLowCellularToxicity: \"\",\n  });\n\n  const setForm = (e) => {\n    var newFormValue = { ...formValue };\n    newFormValue[e.target.name] = e.target.value;\n    setFormValue(newFormValue);\n    console.log(e);\n  };\n\n  const nextButtonItems = [\n    {\n      label: \"Save form data in browser\",\n      icon: \"pi pi-cloud-download\",\n      command: () => {\n        console.log(\"Save form data local\");\n      },\n    },\n    {\n      label: \"Reset\",\n      icon: \"pi pi-refresh\",\n      command: () => {\n        console.log(\"Reset Section\");\n      },\n    },\n  ];\n\n  const selectItemsYN = [\n    { label: \"Yes\", value: \"yes\" },\n    { label: \"No\", value: \"no\" },\n    { label: \"Unknown\", value: \"un\" },\n  ];\n\n  const selectItemsAI = [\n    { label: \"Active\", value: \"active\" },\n    { label: \"Inactive\", value: \"inactive\" },\n    { label: \"Unknown\", value: \"un\" },\n  ];\n\n  return (\n    <React.Fragment>\n      <div className=\"card\">\n        <h5>a) Metabolic liabilities</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"targetInhibitionActivation\"\n              className=\"p-col-12 p-md-6\"\n            >\n              Target inhibition/activation can be neutralized by a suppliment\n              (eg: a metabolite) or in specifc media?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"targetInhibitionActivation\"\n                options={selectItemsYN}\n                value={formValue.targetInhibitionActivation}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"concentrationOfSupplement\"\n              className=\"p-col-12 p-md-6\"\n            >\n              Concentration of supplement in human tissue is too low to\n              neutralize inactivation?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"concentrationOfSupplement\"\n                options={selectItemsYN}\n                value={formValue.concentrationOfSupplement}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <br />\n        </div>\n      </div>\n\n      <div className=\"card\">\n        <h5>b) Genetic</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"functionallyRedundantGenes\"\n              className=\"p-col-12 p-md-6\"\n            >\n              Does the Mtb genome contain functionally redundant genes?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"functionallyRedundantGenes\"\n                options={selectItemsYN}\n                value={formValue.functionallyRedundantGenes}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <br />\n        </div>\n      </div>\n\n      <div className=\"card\">\n        <h5>c) Other</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"withLowCellularToxicity\"\n              className=\"p-col-12 p-md-6\"\n            >\n              Have inhibitors with low cellular toxicity been isolated or does\n              the protein contain an active or allosteric site that is diferent\n              from the human counterpart?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"withLowCellularToxicity\"\n                options={selectItemsYN}\n                value={formValue.withLowCellularToxicity}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid p-jc-end\">\n            <div className=\"p-col-12 p-md-2\">\n              <SplitButton\n                label=\"Next\"\n                icon=\"pi pi-arrow-right\"\n                model={nextButtonItems}\n                className=\"p-button-success p-button-sm\"\n                onClick={() => {\n                  props.onFormSet(formValue);\n                }}\n              ></SplitButton>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default GenomePromoteFormLiabilities;\n","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormTractability/GenomePromoteFormTractability.js",["105"],"import React, { useState } from \"react\";\nimport { SplitButton } from \"primereact/splitbutton\";\nimport { Dropdown } from \"primereact/dropdown\";\n\nconst GenomePromoteFormTractability = (props) => {\n  const [formValue, setFormValue] = useState({\n    activatorsIdentified: \"\",\n    druggableClass: \"\",\n    noWholeCellActivity: \"\",\n    c3HeFeJChronicInfection: \"\",\n    humanSimilarCounterpart: \"\",\n    largeScaleWholesaleActivity: \"\",\n    structureOfMtbProtein: \"\",\n    structureOfHomolog: \"\",\n    mtbStrains: \"\",\n    nonMtbStrains: \"\",\n    assayForMtbProteins: \"\",\n    assayForMtbProteinsFromAnotherSpecies: \"\",\n  });\n\n  const setForm = (e) => {\n    var newFormValue = { ...formValue };\n    newFormValue[e.target.name] = e.target.value;\n    setFormValue(newFormValue);\n    console.log(e);\n  };\n\n  const nextButtonItems = [\n    {\n      label: \"Save form data in browser\",\n      icon: \"pi pi-cloud-download\",\n      command: () => {\n        console.log(\"Save form data local\");\n      },\n    },\n    {\n      label: \"Reset\",\n      icon: \"pi pi-refresh\",\n      command: () => {\n        console.log(\"Reset Section\");\n      },\n    },\n  ];\n\n  const selectItemsYN = [\n    { label: \"Yes\", value: \"yes\" },\n    { label: \"No\", value: \"no\" },\n    { label: \"Unknown\", value: \"un\" },\n  ];\n\n  const selectItemsAI = [\n    { label: \"Active\", value: \"active\" },\n    { label: \"Inactive\", value: \"inactive\" },\n    { label: \"Unknown\", value: \"un\" },\n  ];\n\n  return (\n    <React.Fragment>\n      <div className=\"card\">\n        <h5>a) Druggability</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"activatorsIdentified\" className=\"p-col-12 p-md-6\">\n              Have inhibitors/activators of the Mtb protein with on-target whole\n              cell activity been identifed?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"activatorsIdentified\"\n                options={selectItemsAI}\n                value={formValue.activatorsIdentified}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"druggableClass\" className=\"p-col-12 p-md-6\">\n              Does the target belong to a druggable class of proteins?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"druggableClass\"\n                options={selectItemsAI}\n                value={formValue.druggableClass}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"noWholeCellActivity\" className=\"p-col-12 p-md-6\">\n              Small-scale screens identifed inhibitors/activators of the Mtb\n              protein but none have whole-cell activity\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"noWholeCellActivity\"\n                options={selectItemsAI}\n                value={formValue.noWholeCellActivity}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"c3HeFeJChronicInfection\"\n              className=\"p-col-12 p-md-6\"\n            >\n              C3He/FeJ-Chronic infection\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"c3HeFeJChronicInfection\"\n                options={selectItemsAI}\n                value={formValue.c3HeFeJChronicInfection}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"humanSimilarCounterpart\"\n              className=\"p-col-12 p-md-6\"\n            >\n              Does the human genome encode a structurally similar counterpart?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"humanSimilarCounterpart\"\n                options={selectItemsAI}\n                value={formValue.humanSimilarCounterpart}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"largeScaleWholesaleActivity\"\n              className=\"p-col-12 p-md-6\"\n            >\n              Large-scale screens for the MTb enzyme have already been performed\n              and did not result in compounds with whole-cell activity.\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"largeScaleWholesaleActivity\"\n                options={selectItemsAI}\n                value={formValue.largeScaleWholesaleActivity}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <br />\n        </div>\n      </div>\n\n      <div className=\"card\">\n        <h5>b) Protein Structure</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"structureOfMtbProtein\" className=\"p-col-12 p-md-6\">\n              Structure of Mtb protein is available\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"structureOfMtbProtein\"\n                options={selectItemsAI}\n                value={formValue.structureOfMtbProtein}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"structureOfHomolog\" className=\"p-col-12 p-md-6\">\n              Structure of homolog is available\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"structureOfHomolog\"\n                options={selectItemsAI}\n                value={formValue.structureOfHomolog}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <br />\n        </div>\n      </div>\n\n      <div className=\"card\">\n        <h5>c) Whole-cell assays</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"mtbStrains\" className=\"p-col-12 p-md-6\">\n              Mtb strain(s) that can confrm on target activity are available;\n              strains can be (1) hypomorphs, (2) overexpressors, and/or (3)\n              resistant mutants\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"mtbStrains\"\n                options={selectItemsAI}\n                value={formValue.mtbStrains}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"nonMtbStrains\" className=\"p-col-12 p-md-6\">\n              Non-Mtb strain, which could be used to characterize compounds with\n              broad spectrum activity are available.\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"nonMtbStrains\"\n                options={selectItemsAI}\n                value={formValue.nonMtbStrains}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <br />\n        </div>\n      </div>\n\n      <div className=\"card\">\n        <h5>d) Biochemical assays</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"assayForMtbProteins\" className=\"p-col-12 p-md-6\">\n              Assay for Mtb protein has been established\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"assayForMtbProteins\"\n                options={selectItemsAI}\n                value={formValue.assayForMtbProteins}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"assayForMtbProteinsFromAnotherSpecies\"\n              className=\"p-col-12 p-md-6\"\n            >\n              Assay has been established for homolog from another species\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"assayForMtbProteinsFromAnotherSpecies\"\n                options={selectItemsAI}\n                value={formValue.assayForMtbProteinsFromAnotherSpecies}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid p-jc-end\">\n            <div className=\"p-col-12 p-md-2\">\n              <SplitButton\n                label=\"Next\"\n                icon=\"pi pi-arrow-right\"\n                model={nextButtonItems}\n                className=\"p-button-success p-button-sm \"\n                onClick={() => {props.onFormSet(formValue)}}\n              ></SplitButton>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default GenomePromoteFormTractability;\n","/Users/sidx/workspace/react/tpt-app/src/scenes/Genome/GenomePromote/GenomePromoteFormInteractions/GenomePromoteFormInteractions.js",["106"],"import React, { useState } from \"react\";\nimport { SplitButton } from \"primereact/splitbutton\";\nimport { Dropdown } from \"primereact/dropdown\";\n\nconst GenomePromoteFormInteractions = (props) => {\n  const [formValue, setFormValue] = useState({\n    cIGrowthActivationOfTheTargetSynergize: \"\",\n    cIGrowthActivationOfTheTargetAntagonize: \"\",\n    cIInfectionActivationOfTheTargetSynergize: \"\",\n    cIInfectionActivationOfTheTargetAntagonize: \"\",\n    gIInfectionActivationOfTheTargetSynergize: \"\",\n    gIInfectionActivationOfTheTargetAntagonize: \"\",\n    gIGrowthActivationOfTheTargetSynergize: \"\",\n    gIGrowthActivationOfTheTargetAntagonize: \"\",\n  });\n\n  const setForm = (e) => {\n    var newFormValue = { ...formValue };\n    newFormValue[e.target.name] = e.target.value;\n    setFormValue(newFormValue);\n    console.log(e);\n  };\n\n  const nextButtonItems = [\n    {\n      label: \"Save form data in browser\",\n      icon: \"pi pi-cloud-download\",\n      command: () => {\n        console.log(\"Save form data local\");\n      },\n    },\n    {\n      label: \"Reset\",\n      icon: \"pi pi-refresh\",\n      command: () => {\n        console.log(\"Reset Section\");\n      },\n    },\n  ];\n\n  const selectItemsYN = [\n    { label: \"Yes\", value: \"yes\" },\n    { label: \"No\", value: \"no\" },\n    { label: \"Unknown\", value: \"un\" },\n  ];\n\n  const selectItemsAI = [\n    { label: \"Active\", value: \"active\" },\n    { label: \"Inactive\", value: \"inactive\" },\n    { label: \"Unknown\", value: \"un\" },\n  ];\n\n  return (\n    <React.Fragment>\n      <div className=\"card\">\n        <h5>a) Chemical inhibition during growth in vitro</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"cIGrowthActivationOfTheTargetSynergize\" className=\"p-col-12 p-md-6\">\n              Does inhibition/activation of the target synergize with current TB\n              drugs or other drugs under development?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"cIGrowthActivationOfTheTargetSynergize\"\n                options={selectItemsYN}\n                value={formValue.cIGrowthActivationOfTheTargetSynergize}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"cIGrowthActivationOfTheTargetAntagonize\" className=\"p-col-12 p-md-6\">\n              Does inhibition/activation of the target antagonize with current\n              TB drugs or other drugs under development?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"cIGrowthActivationOfTheTargetAntagonize\"\n                options={selectItemsYN}\n                value={formValue.cIGrowthActivationOfTheTargetAntagonize}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <br />\n        </div>\n      </div>\n\n      <div className=\"card\">\n        <h5>b) Chemical inhibition during infection</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"cIInfectionActivationOfTheTargetSynergize\" className=\"p-col-12 p-md-6\">\n              Does inhibition/activation of the targt synergize wtih current TB\n              drugs or other drugs under development?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"cIInfectionActivationOfTheTargetSynergize\"\n                options={selectItemsYN}\n                value={formValue.cIInfectionActivationOfTheTargetSynergize}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"cIInfectionActivationOfTheTargetAntagonize\" className=\"p-col-12 p-md-6\">\n              Does inhibition/activation of the target antagonize with current\n              TB drugs or other drugs under development?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"cIInfectionActivationOfTheTargetAntagonize\"\n                options={selectItemsYN}\n                value={formValue.cIInfectionActivationOfTheTargetAntagonize}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <br />\n        </div>\n      </div>\n\n      <div className=\"card\">\n        <h5>c) Genetic inhibition during infection</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"gIInfectionActivationOfTheTargetSynergize\" className=\"p-col-12 p-md-6\">\n              Does inhibition/activation of the targt synergize wtih current TB\n              drugs or other drugs under development?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"gIInfectionActivationOfTheTargetSynergize\"\n                options={selectItemsYN}\n                value={formValue.gIInfectionActivationOfTheTargetSynergize}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"gIInfectionActivationOfTheTargetAntagonize\" className=\"p-col-12 p-md-6\">\n              Does inhibition/activation of the target antagonize with current\n              TB drugs or other drugs under development?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"gIInfectionActivationOfTheTargetAntagonize\"\n                options={selectItemsYN}\n                value={formValue.gIInfectionActivationOfTheTargetAntagonize}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <br />\n        </div>\n      </div>\n\n      <div className=\"card\">\n        <h5>d) Genetic inhibition during growth in vitro</h5>\n        <div className=\"p-fluid\">\n          <div className=\"p-field p-grid\">\n            <label htmlFor=\"gIGrowthActivationOfTheTargetSynergize\" className=\"p-col-12 p-md-6\">\n              Does inhibition/activation of the targt synergize wtih current TB\n              drugs or other drugs under development?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"gIGrowthActivationOfTheTargetSynergize\"\n                options={selectItemsYN}\n                value={formValue.gIGrowthActivationOfTheTargetSynergize}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid\">\n            <label\n              htmlFor=\"gIGrowthActivationOfTheTargetAntagonize\"\n              className=\"p-col-12 p-md-6\"\n            >\n              Does inhibition/activation of the target antagonize with current\n              TB drugs or other drugs under development?\n            </label>\n            <div className=\"p-col-12 p-md-6\">\n              <Dropdown\n                name=\"gIGrowthActivationOfTheTargetAntagonize\"\n                options={selectItemsYN}\n                value={formValue.gIGrowthActivationOfTheTargetAntagonize}\n                optionLabel=\"label\"\n                onChange={(e) => setForm(e)}\n                placeholder=\"Select a value\"\n              />\n            </div>\n          </div>\n\n          <div className=\"p-field p-grid p-jc-end\">\n            <div className=\"p-col-12 p-md-2\">\n              <SplitButton\n                label=\"Next\"\n                icon=\"pi pi-arrow-right\"\n                model={nextButtonItems}\n                className=\"p-button-success p-button-sm \"\n                onClick={() => {props.onFormSet(formValue)}}\n              ></SplitButton>\n            </div>\n          </div>\n        </div>\n      </div>\n    </React.Fragment>\n  );\n};\n\nexport default GenomePromoteFormInteractions;\n",{"ruleId":"107","replacedBy":"108"},{"ruleId":"109","replacedBy":"110"},{"ruleId":"111","severity":1,"message":"112","line":1,"column":35,"nodeType":"113","messageId":"114","endLine":1,"endColumn":44},{"ruleId":"111","severity":1,"message":"112","line":1,"column":35,"nodeType":"113","messageId":"114","endLine":1,"endColumn":44},{"ruleId":"111","severity":1,"message":"115","line":48,"column":9,"nodeType":"113","messageId":"114","endLine":48,"endColumn":22},{"ruleId":"111","severity":1,"message":"116","line":47,"column":9,"nodeType":"113","messageId":"114","endLine":47,"endColumn":22},{"ruleId":"111","severity":1,"message":"115","line":43,"column":9,"nodeType":"113","messageId":"114","endLine":43,"endColumn":22},{"ruleId":"111","severity":1,"message":"116","line":45,"column":9,"nodeType":"113","messageId":"114","endLine":45,"endColumn":22},{"ruleId":"111","severity":1,"message":"115","line":47,"column":9,"nodeType":"113","messageId":"114","endLine":47,"endColumn":22},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'selectItemsAI' is assigned a value but never used.","'selectItemsYN' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]