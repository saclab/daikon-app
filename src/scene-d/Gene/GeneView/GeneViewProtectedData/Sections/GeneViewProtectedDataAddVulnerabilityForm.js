import { useFormik } from "formik";
import { Button } from "primereact/button";
import { InputText } from "primereact/inputtext";
import { InputTextarea } from "primereact/inputtextarea";
import { classNames } from "primereact/utils";
import React from "react";

const GeneViewProtectedDataAddVulnerabilityForm = ({
  add,
  adding,
  closeSidebar,
}) => {
  const formik = useFormik({
    initialValues: {
      rank: "",
      viUpperBound: "",
      viLowerBound: "",
      vulnerabilityIndex: "",
      vulnerabilityCondition: "",
      tnseqEss: "",
      crisprEss: "",
      highConfidenceVulnerabilityCall: "",
      reference: "",
      notes: "",
    },

    validate: (data) => {
      let errors = {};

      if (!data.viUpperBound) {
        errors.viUpperBound = "vi UpperBound is required.";
      }
      if (!data.viLowerBound) {
        errors.viLowerBound = "vi LowerBound is required.";
      }
      return errors;
    },

    onSubmit: (data) => {
      add(data).then((res) => {
        if (res !== null) {
          closeSidebar();
          formik.resetForm();
        }
      });
    },
  });

  const isFormFieldValid = (element) =>
    !!(formik.touched[element] && formik.errors[element]);
  const getFormErrorMessage = (element) => {
    return (
      isFormFieldValid(element) && (
        <small className="p-error">{formik.errors[element]}</small>
      )
    );
  };

  return (
    <div className="card w-full">
      <form onSubmit={formik.handleSubmit} className="p-fluid">
        <div className="field">
          <label
            htmlFor="rank"
            className={classNames({
              "p-error": isFormFieldValid("rank"),
            })}
          >
            Rank*
          </label>

          <InputText
            id="rank"
            value={formik.values.rank}
            onChange={formik.handleChange}
            autoFocus
            className={classNames({
              "p-invalid": isFormFieldValid("rank"),
            })}
          />
          {getFormErrorMessage("rank")}
        </div>

        <div className="field">
          <label
            htmlFor="viUpperBound"
            className={classNames({
              "p-error": isFormFieldValid("viUpperBound"),
            })}
          >
            VI Upper Bound
          </label>

          <InputText
            id="viUpperBound"
            value={formik.values.viUpperBound}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("viUpperBound"),
            })}
          />
          {getFormErrorMessage("viUpperBound")}
        </div>

        <div className="field">
          <label
            htmlFor="viLowerBound"
            className={classNames({
              "p-error": isFormFieldValid("viLowerBound"),
            })}
          >
            VI Lower Bound
          </label>

          <InputText
            id="viLowerBound"
            value={formik.values.viLowerBound}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("viLowerBound"),
            })}
          />
          {getFormErrorMessage("viLowerBound")}
        </div>

        <div className="field">
          <label
            htmlFor="vulnerabilityIndex"
            className={classNames({
              "p-error": isFormFieldValid("vulnerabilityIndex"),
            })}
          >
            Vulnerability Index
          </label>

          <InputText
            id="vulnerabilityIndex"
            value={formik.values.vulnerabilityIndex}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("vulnerabilityIndex"),
            })}
          />
          {getFormErrorMessage("vulnerabilityIndex")}
        </div>

        <div className="field">
          <label
            htmlFor="vulnerabilityCondition"
            className={classNames({
              "p-error": isFormFieldValid("vulnerabilityCondition"),
            })}
          >
            Vulnerability Condition
          </label>

          <InputText
            id="vulnerabilityCondition"
            value={formik.values.vulnerabilityCondition}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("vulnerabilityCondition"),
            })}
          />
          {getFormErrorMessage("vulnerabilityCondition")}
        </div>

        <div className="field">
          <label
            htmlFor="tnseqEss"
            className={classNames({
              "p-error": isFormFieldValid("tnseqEss"),
            })}
          >
            TnSeq Ess
          </label>

          <InputText
            id="tnseqEss"
            value={formik.values.tnseqEss}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("tnseqEss"),
            })}
          />
          {getFormErrorMessage("tnseqEss")}
        </div>

        <div className="field">
          <label
            htmlFor="crisprEss"
            className={classNames({
              "p-error": isFormFieldValid("crisprEss"),
            })}
          >
            CRISPR Ess
          </label>

          <InputText
            id="crisprEss"
            value={formik.values.crisprEss}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("crisprEss"),
            })}
          />
          {getFormErrorMessage("crisprEss")}
        </div>

        <div className="field">
          <label
            htmlFor="highConfidenceVulnerabilityCall"
            className={classNames({
              "p-error": isFormFieldValid("highConfidenceVulnerabilityCall"),
            })}
          >
            High-Confidence vulnerability call
          </label>

          <InputText
            id="highConfidenceVulnerabilityCall"
            value={formik.values.highConfidenceVulnerabilityCall}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("highConfidenceVulnerabilityCall"),
            })}
          />
          {getFormErrorMessage("highConfidenceVulnerabilityCall")}
        </div>

        <div className="field">
          <label
            htmlFor="reference"
            className={classNames({
              "p-error": isFormFieldValid("reference"),
            })}
          >
            Reference
          </label>
          <InputText
            id="reference"
            value={formik.values.reference}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("reference"),
            })}
          />
          {getFormErrorMessage("reference")}
        </div>

        <div className="field">
          <label
            htmlFor="notes"
            className={classNames({
              "p-error": isFormFieldValid("notes"),
            })}
          >
            Notes
          </label>
          <InputTextarea
            id="notes"
            value={formik.values.notes}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("notes"),
            })}
          />
          {getFormErrorMessage("notes")}
        </div>

        <div className="flex justify-content-center">
          <div className="flex">
            <Button
              icon="icon icon-common icon-database-submit"
              type="submit"
              label="Add to database"
              className="p-button-secondary p-button-sm"
              loading={adding}
            />
          </div>
        </div>
      </form>
    </div>
  );
};

export default GeneViewProtectedDataAddVulnerabilityForm;
