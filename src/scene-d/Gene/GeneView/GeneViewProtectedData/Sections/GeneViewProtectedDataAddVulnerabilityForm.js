import { useFormik } from "formik";
import { Button } from "primereact/button";
import { InputText } from "primereact/inputtext";
import { classNames } from "primereact/utils";
import React from "react";

const GeneViewProtectedDataAddVulnerabilityForm = ({
  add,
  adding,
  closeSidebar,
}) => {
  const formik = useFormik({
    initialValues: {
      rank: "",
      uvi: "",
      ivi: "",
      viRatio: "",
      vulnerabilityCondition: "",
      operon: "",
      confounded: "",
      shell2015Operon: "",
    },

    validate: (data) => {
      let errors = {};

      if (!data.rank) {
        errors.rank = "Rank is required.";
      }
      return errors;
    },

    onSubmit: (data) => {
      console.log(data);
      add(data).then((res) => {
        if (res !== null) {
          closeSidebar();
          formik.resetForm();
        }
      });
    },
  });

  const isFormFieldValid = (element) =>
    !!(formik.touched[element] && formik.errors[element]);
  const getFormErrorMessage = (element) => {
    return (
      isFormFieldValid(element) && (
        <small className="p-error">{formik.errors[element]}</small>
      )
    );
  };

  return (
    <div className="card w-full">
      <form onSubmit={formik.handleSubmit} className="p-fluid">
        <div className="field">
          <label
            htmlFor="rank"
            className={classNames({
              "p-error": isFormFieldValid("rank"),
            })}
          >
            Rank*
          </label>

          <InputText
            id="rank"
            value={formik.values.rank}
            onChange={formik.handleChange}
            autoFocus
            className={classNames({
              "p-invalid": isFormFieldValid("rank"),
            })}
          />
          {getFormErrorMessage("rank")}
        </div>

        <div className="field">
          <label
            htmlFor="uvi"
            className={classNames({
              "p-error": isFormFieldValid("uvi"),
            })}
          >
            U Vi
          </label>

          <InputText
            id="uvi"
            value={formik.values.uvi}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("uvi"),
            })}
          />
          {getFormErrorMessage("uvi")}
        </div>

        <div className="field">
          <label
            htmlFor="ivi"
            className={classNames({
              "p-error": isFormFieldValid("ivi"),
            })}
          >
            I Vi
          </label>

          <InputText
            id="ivi"
            value={formik.values.ivi}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("ivi"),
            })}
          />
          {getFormErrorMessage("ivi")}
        </div>

        <div className="field">
          <label
            htmlFor="viRatio"
            className={classNames({
              "p-error": isFormFieldValid("viRatio"),
            })}
          >
            Vi Ratio
          </label>

          <InputText
            id="viRatio"
            value={formik.values.viRatio}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("viRatio"),
            })}
          />
          {getFormErrorMessage("viRatio")}
        </div>

        <div className="field">
          <label
            htmlFor="vulnerabilityCondition"
            className={classNames({
              "p-error": isFormFieldValid("vulnerabilityCondition"),
            })}
          >
            Vulnerability Condition
          </label>

          <InputText
            id="vulnerabilityCondition"
            value={formik.values.vulnerabilityCondition}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("vulnerabilityCondition"),
            })}
          />
          {getFormErrorMessage("vulnerabilityCondition")}
        </div>

        <div className="field">
          <label
            htmlFor="operon"
            className={classNames({
              "p-error": isFormFieldValid("operon"),
            })}
          >
            Operon
          </label>

          <InputText
            id="operon"
            value={formik.values.operon}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("operon"),
            })}
          />
          {getFormErrorMessage("operon")}
        </div>

        <div className="field">
          <label
            htmlFor="confounded"
            className={classNames({
              "p-error": isFormFieldValid("confounded"),
            })}
          >
            Confounded
          </label>

          <InputText
            id="confounded"
            value={formik.values.confounded}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("confounded"),
            })}
          />
          {getFormErrorMessage("confounded")}
        </div>

        <div className="field">
          <label
            htmlFor="shell2015Operon"
            className={classNames({
              "p-error": isFormFieldValid("shell2015Operon"),
            })}
          >
            Shell 2015 Operon
          </label>

          <InputText
            id="shell2015Operon"
            value={formik.values.shell2015Operon}
            onChange={formik.handleChange}
            className={classNames({
              "p-invalid": isFormFieldValid("shell2015Operon"),
            })}
          />
          {getFormErrorMessage("shell2015Operon")}
        </div>

        <div className="flex justify-content-center">
          <div className="flex">
            <Button
              icon="icon icon-common icon-database-submit"
              type="submit"
              label="Add to database"
              className="p-button-secondary p-button-sm"
              loading={adding}
            />
          </div>
        </div>
      </form>
    </div>
  );
};

export default GeneViewProtectedDataAddVulnerabilityForm;
